basePath: /api
definitions:
  api.ErrorResponse:
    properties:
      error:
        example: Error
        type: string
    type: object
  api.SuccessResponse:
    properties:
      message:
        example: Success
        type: string
    type: object
  controllers.LoginPayload:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - token
    type: object
  controllers.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/controllers.UserResponse'
    type: object
  controllers.TodoCreatePayload:
    properties:
      done:
        example: false
        type: boolean
      title:
        example: New todo title
        type: string
      user_id:
        example: 1
        type: integer
    required:
    - title
    - user_id
    type: object
  controllers.TodoResponse:
    properties:
      createdAt:
        example: "2024-01-09T11:59:57Z"
        type: string
      done:
        example: true
        type: boolean
      id:
        example: 1
        type: integer
      title:
        example: Todo title
        type: string
      user:
        $ref: '#/definitions/controllers.UserResponse'
    type: object
  controllers.TodoUpdatePayload:
    properties:
      done:
        example: false
        type: boolean
      title:
        example: New title
        type: string
    type: object
  controllers.TodosResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.TodoResponse'
        type: array
      total:
        example: 100
        type: integer
    type: object
  controllers.UserResponse:
    properties:
      createdAt:
        example: "2024-01-09T11:59:57Z"
        type: string
      email:
        example: john.doe@gmail.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      role:
        enum:
        - user
        - moderator
        - admin
        example: user
        type: string
    type: object
  controllers.UsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.UserResponse'
        type: array
      total:
        example: 100
        type: integer
    type: object
host: localhost:3001
info:
  contact: {}
  description: Beaver Admin API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Beaver Admin API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: log in with token
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Log in via google oauth token
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: log out
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
      summary: Log out
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: get current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get current user
      tags:
      - auth
  /todos:
    get:
      consumes:
      - application/json
      description: get todos
      parameters:
      - example: false
        in: query
        name: done
        type: boolean
      - example: 1
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TodosResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: create a new todo
      parameters:
      - description: todo payload
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/controllers.TodoCreatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TodoResponse'
      summary: Create a new todo
      tags:
      - todos
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: delete a todo
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: get a todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TodoResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a todo
      tags:
      - todos
    patch:
      consumes:
      - application/json
      description: update a todo
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: todo payload
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/controllers.TodoUpdatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TodoResponse'
      summary: Update a todo
      tags:
      - todos
  /users:
    get:
      consumes:
      - application/json
      description: get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UsersResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List users
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a user
      tags:
      - users
swagger: "2.0"
